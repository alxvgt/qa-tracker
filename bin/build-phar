#!/usr/bin/env php
<?php

use Alxvng\QATracker\Command\TrackCommand;
use Symfony\Component\Finder\Finder;

require __DIR__.'/vendor/autoload.php';

// The php.ini setting phar.readonly must be set to 0

$pharFile = 'qatracker.phar';
$pharZip = 'qatracker.zip';

// clean up
if (file_exists($pharFile)) {
    unlink($pharFile);
}
if (file_exists($pharFile.'.gz')) {
    unlink($pharFile.'.gz');
}
if (file_exists($pharZip)) {
    unlink($pharZip);
}

$p = new Phar($pharFile);

$finder = new Finder();
$finder
    ->files()
    ->in(__DIR__)
    ->ignoreDotFiles(false)
    ->exclude(TrackCommand::BASE_DIR.'.dist/'.TrackCommand::GENERATED_DIR)
    ->exclude(TrackCommand::BASE_DIR)
    ->exclude('docker')
    ->exclude('docs')
    ->exclude('tests')
    ->notName(
        [
            '*.loc',
            '*.phar.gz',
            '*.phar',
            '*.sh',
            '*.zip',
            '*.png',
            '*.jpg',
            '*.jpeg',
            '*.js',
            '*.css',
            '*.json',
            '*.exe',
            '*.rst',
            '*.html',
        ])
    ->notName('composer.*')
    ->notName('.gitignore')
    ->notName('create-phar.php')
    ->notContains('PHPUnit\Framework');

createZip($finder, $pharZip);
$p->buildFromIterator($finder->getIterator(), __DIR__);
$p->setDefaultStub('qatracker.php', '/qatracker.php');
$p->compress(Phar::GZ);

echo "\n";
echo "\n== Archived files ==\n";

$children = $p->getChildren();
/** @var PharFileInfo $child */
foreach ($children as $child) {
    echo '> '.$child->getFilename()."\n";
}

echo "\n";
echo sprintf(
    'Phar archive : "%s" (%s) successfully created',
    $pharFile,
    human_filesize(filesize($pharFile))
);
echo "\n";
echo "\n";


/** ---------------------------------- */

/**
 * @param     $bytes
 * @param int $decimals
 * @return string
 */
function human_filesize($bytes, $decimals = 2)
{
    $sz = 'BKMGTP';
    $factor = floor((strlen($bytes) - 1) / 3);

    return sprintf("%.{$decimals}f", $bytes / (1024 ** $factor)).@$sz[$factor];
}

/**
 * @param Finder $finder
 * @param string $zipName
 * @return ZipArchive
 */
function createZip(Finder $finder, string $zipName)
{
    echo "\nCreating zip...";
    $zip = new ZipArchive();

    if ($zip->open($zipName, ZipArchive::CREATE) !== true) {
        throw new RuntimeException('Zip file could not be created/opened.');
    }

    foreach ($finder as $file) {
        $zip->addFile($file->getRealpath(), basename($file->getRealpath()));
    }

    if (!$zip->close()) {
        throw new RuntimeException('Zip file could not be closed.');
    }

    return $zip;
}